<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:cxf="http://cxf.apache.org/core"
	xsi:schemaLocation="
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd
            http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
            http://cxf.apache.org/jaxws http://cxf.apache.org/schemas/jaxws.xsd
            http://cxf.apache.org/core http://cxf.apache.org/schemas/core.xsd">

	<import resource="classpath:security.xml" />
	<import resource="classpath:META-INF/cxf/cxf.xml" />
	<!--import resource="classpath:META-INF/cxf/cxf-servlet.xml" />
	<import resource="classpath:META-INF/cxf/cxf-extension-soap.xml" /-->

	<context:component-scan base-package="com.mpx.birjan" />

	<tx:annotation-driven />

	<!--bean class="org.springframework.orm.jpa.LocalEntityManagerFactoryBean" 
		id="entityManagerFactory"> <property name="persistenceUnitName" value="MyPersistenceUnit"/> 
		</bean -->

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceXmlLocation" value="classpath:persistence2.xml" />
		<property name="persistenceUnitName" value="PUnit" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="org.hsqldb.jdbcDriver" />
		<property name="url" value="jdbc:hsqldb:file:data/birjan" />
		<property name="username" value="sa" />
		<property name="password" value="" />
	</bean>

	<bean class="org.springframework.orm.jpa.JpaTransactionManager"
		id="transactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- AUTH -->

	<!--bean id="authenticationManager"
		class="org.springframework.security.authentication.ProviderManager">
		<property name="providers">
			<bean
				class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
				<property name="userDetailsService" ref="userDetailsService" />
			</bean>
		</property>
	</bean>

	<bean id="userDetailsService"
		class="org.springframework.security.provisioning.JdbcUserDetailsManager">
		<property name="dataSource" ref="dataSource" />
	</bean-->



	<jaxws:endpoint id="birjanws" implementor="#birjanServiceEndpoint"
		address="/birjanws">
		<jaxws:inInterceptors>
			<ref bean="authenticationInterceptor" />
		</jaxws:inInterceptors>
	</jaxws:endpoint>
	
		<bean id="myPasswordCallback"
      		class="com.mpx.birjan.core.ServerPasswordCallback"/>

	<bean id="authenticationInterceptor" class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor">
		<constructor-arg>
			<map>
				<entry
					key="#{T(org.apache.ws.security.handler.WSHandlerConstants).ACTION}"
					value="#{T(org.apache.ws.security.handler.WSHandlerConstants).USERNAME_TOKEN}" />
				<entry
					key="#{T(org.apache.ws.security.handler.WSHandlerConstants).PASSWORD_TYPE}"
					value="#{T(org.apache.ws.security.WSConstants).PW_TEXT}" />
				<entry key="passwordCallbackRef">
                  <ref bean="myPasswordCallback"/>
               </entry>
			</map>
		</constructor-arg>
	</bean>
		
	<!-- logging -->
	<bean id="logInbound" class="org.apache.cxf.interceptor.LoggingInInterceptor" />
	<bean id="logOutbound" class="org.apache.cxf.interceptor.LoggingOutInterceptor" />
	<cxf:bus>
		<cxf:inInterceptors>
			<ref bean="logInbound" />
		</cxf:inInterceptors>
		<cxf:outInterceptors>
			<ref bean="logOutbound" />
		</cxf:outInterceptors>
		<cxf:inFaultInterceptors>
			<ref bean="logOutbound" />
		</cxf:inFaultInterceptors>
	</cxf:bus>

	<bean id="authenticationEntryPoint"
		class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
		<property name="realmName" value="birjan" />
	</bean>

	<!-- AUTH -->
	<!--bean class="org.springframework.remoting.jaxws.SimpleJaxWsServiceExporter"> 
		<property name="baseAddress" value="http://localhost:8081/" /> </bean>

	<bean
		class="org.springframework.remoting.jaxws.SimpleHttpServerJaxWsServiceExporter">
		<property name="server" ref="myServer" />
	</bean>

	<bean id="myServer" class="com.sun.net.httpserver.HttpsServer"
		factory-method="create" init-method="start" autowire="byName">
		<constructor-arg ref="socket" />
		<constructor-arg value="0" />
	</bean>

	<bean id="socket" class="java.net.InetSocketAddress">
		<constructor-arg value="localhost" />
		<constructor-arg value="8081" />
	</bean>

	<bean id="httpsConfigurator" class="com.sun.net.httpserver.HttpsConfigurator">
		<constructor-arg ref="sslContext" />
	</bean>

	<bean id="sslContext" class="com.mpx.birjan.core.ConfiguredSSLContext"
		factory-method="getSSLContext">
		<constructor-arg
			value="C:\development\tools\jdk1.6.0_29\keyTools\keys\birjan.keystore" />
		<constructor-arg value="1Qaz2wsx" />
		<constructor-arg value="1Qaz2wsx" />
	</bean-->

</beans>
